<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 338342 Maintainer: ae Status: ready --><!-- CREDITS thomasgm,ae -->
 <chapter xml:id="tutorial" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Um simples tutorial</title>

  <para>
   Aqui nós iremos mostrar o básico do básico do PHP em um curto tutorial. 
   Este texto fala somente sobre a criação de páginas dinâmicas com o PHP, 
   visto que o PHP pode criar mais do que somente webpages. Veja a seção 
   entitulada <link linkend="intro-whatcando">O que o PHP pode fazer</link> 
   para mais informações.
  </para>
  <para>
   Fazer páginas com PHP é o mesmo que criar páginas HTML e você pode 
   criá-las e editá-las da mesma maneira que faz com suas páginas HTML
   normalmente.
  </para>

  <section xml:id="tutorial.requirements">
   <title>O que eu preciso?</title>
   <para>
    Neste tutorial nós presumimos que seu servidor tem suporte ao PHP 
    ativado e que todos os arquivos terminam com a extensão  <filename>.php</filename>
    são tratados pelo PHP. Na maioria dos servidores esta é a extensão 
    padrão para os arquivos PHP, mas pergunte ao seu administrador só 
    para ter certeza. Se o seu servidor suporta PHP então você não precisa 
    fazer mais nada. Apenas crie seus arquivos <filename>.php</filename> 
    e coloque-os no seu diretório web e o servidor irá com um passe de 
    mágica mostrar suas páginas PHP. Não há nenhuma necessidade de compilação 
    para qualquer ferramenta extra. Pense nesses arquivos PHP como se eles 
    fossem páginas HTML com algumas tags à mais que deixaram você fazer coisas 
    mais interessantes do que somente páginas HTML estáticas.
   </para>
   <para>
    Digamos que você quer salvar sua preciosa conexão e desenvolver tudo 
    localmente. Neste caso, você precisará instalar um servidor web, 
    como o <link xlink:href="&url.apache;">Apache</link>, e claro o  
    <link xlink:href="&url.php.downloads;">PHP</link>.  Você também irá querer 
    instalar uma base de dados, como por exemplo o 
    <link xlink:href="&url.mysql.docs;">MySQL</link>.
   </para>
   <para>
    Você pode instalá-los separadamente ou de um jeito mais simples. O
    manual contém <link linkend="install">instruções de instalação do
    PHP</link> (supondo que você já tem um servidor web). Se
    tiver problemas com a instalação do próprio PHP, sugerimos que
    pergunte em nossa <link xlink:href="&url.php.mailing-lists;">lista de discussão
    sobre assuntos de instalação.</link>. Se preferir uma rota mais simples então
    <link xlink:href="&url.installkits;">veja um pacote pré-configurado</link>
    para o seu sistema operacional, qual automaticamente instalará tudo
    com apenas alguns clicks. É fácil de instalar um webservice com suporte
    ao PHP em qualquer sistema operacional, incluindo MacOSX, Linux e Windows.
    No Linux, você verá que <link xlink:href="&url.rpmfind;">rpmfind</link> e
    <link xlink:href="&url.rpmfind.pbone;">PBone</link> são úteis para
    localizar RPMs. Você também pode usar o <link
     xlink:href="&url.apt-get;">apt-get</link> para localizar pacotes para o Debian.
   </para>
  </section>

  <section xml:id="tutorial.firstpage">
   <title>Sua primeira página PHP</title>
   <para>
    Crie um novo arquivo chamado <filename>ola.php</filename> e coloque-o em seu 
    diretório root do seu servidor web (<varname>DOCUMENT_ROOT</varname>) 
    com o seguinte conteúdo:
   </para>
   <para>
    <example>
     <title>Nosso primeiro script PHP: <filename>ola.php</filename></title>
     <programlisting role="php">
<![CDATA[
<html>
 <head>
  <title>PHP Teste</title>
 </head>
 <body>
 <?php echo "<p>Olá Mundo</p>"; ?>
 </body>
</html>
]]>
     </programlisting>
     <simpara>
      Use o seu navegador para acessar o arquivo pelo endereço de seu servidor web, 
      ao final do endereço coloque o arquivo "/ola.php" como referência. Quando o desenvolvimento é local
      você usará uma url como esta <literal>http://localhost/ola.php</literal> 
      ou <literal>http://127.0.0.1/ola.php</literal> mas dependendo da configuração 
      do seu servidor web. Se tudo foi configurado corretamente, o arquivo
      irá ser interpretado pelo PHP e irá mostrar a seguinte mensagem 
      no seu navegador:
     </simpara>
     <screen role="html">
<![CDATA[
<html>
 <head>
  <title>PHP Teste</title>
 </head>
 <body>
 <p>Olá Mundo</p>
 </body>
</html>
]]>
     </screen>
    </example>
   </para>
   <para>
    Este programa é realmente simples e você não precisa do
    PHP para criar uma página assim (fixa). Tudo o que ela faz é mostrar
    <literal>Hello World</literal> utilizando a instrução <function>echo</function>.
    No que o arquivo <emphasis>não precisa ser executável</emphasis>
    ou especial. O servidor web encontra o arquivo a ser interpretado
    por causa da exenteção ".php" extension, que o servidor é configurado 
    para repassar ao PHP. Pense nisso como um arquivo HTML normal que por acaso
    possui tags especiais que podem ser utilizadas para fazer coisas interessantes.
   </para>
   <para>
    Se você tentar rodar este exemplo e ele não mostrar nenhuma mensagem de saída, 
    ou aparecer uma caixa de diálogo pedindo para você salvar o arquivo, ou você 
    ver o arquivo em formato de texto, há uma grande chance do seu servidor não 
    ter o PHP habilitado. Peça ao seu administrar para habilitar o PHP para você, 
    usando o capítulo de <link linkend="install">Instalação</link> do 
    manual. Se você está desenvolvendo localmente, também leia o
    capítulo indicado acima para ter certeza de que configurou
    tudo corretamente. Confirme que está acessando o arquivo via HTTP através
    do servidor web. Se acessar o arquivo através do sistema de 
    arquivos, então ele não será interpretado pelo . Caso o problema persista,
    não hesite em nos chamar nos vários 
    <link xlink:href="&url.php.support;">canais de suporter do PHP</link>.
   </para>
   <para>
    O objetivo do exemplo é mostrar o formato especial das tags do PHP. 
    Neste exemplo nós usamos <literal>&lt;?php</literal> para indicar que 
    à partir daquele ponto começa um código PHP. Então nós colocamos uma declaração 
    de fechamento para indicar que o script PHP acabou, usando a tag <literal>?&gt;</literal>. 
    Você pode usar o PHP em qualquer parte do seu código HTML, e também pode usar várias 
    tags de abertura e fechamento no mesmo arquivo. Para mais detalhes, leia a seção do 
    manual que fala da sintaxe <link linkend="language.basic-syntax">básica do PHP</link>.
   </para>

   <note>
    <info><title>Uma nota sobre fins de linha</title></info>
    <para>
     Fins de linha tem pouco significado no HTML, entretanto é uma boa ideia
     fazer o seu HTML ter uma boa aparência e organização através da divisão em linhas. Um
     fim de linha imediatamente após a tag de fechamento 
     <literal>?&gt;</literal> será removido pelo PHP. Isso pode ser extremamente
     útil quando juntando vários blocos de PHP ou arquivos incluídos contendo
     apenas PHP, que não devessem imprimir nada no processo. Mas pode ser também
     confuso. Você pode colocar um espaço depois da tag de fechamento
     <literal>?&gt;</literal> para forçar o espaço e fim de linha no final da saída,
     ou explicitamente imprimir o fim de linha com um último echo/print de dentro
     de um bloco PHP.
    </para> 
   </note> 

   <note>
    <title>Uma Nota sobre os Editores de Texto</title>
    <para>
     Há muitos editores de textos e Integrated Development Enviroments (IDEs) 
     que você pode usar para criar, editar e gerenciar arquivos PHP. Uma lista 
     parcial destas ferramentas pode ser vista na <link xlink:href="&url.phpeditorlist;">Lista de Editores
     para PHP</link>. Se você gostaria de recomendar algum editor, por favor 
     visite o endereço acima e pergunte ao administrador do site para adicionar o seu 
     editor à lista. Ter um editor que colora as sintaxes das tags pode ser muito útil.
    </para>
   </note>
   
   <note>
    <title>Uma Nota sobre os Processadores Word</title>
    <para>
     Processadores Word como o StarOffice Write, Microsoft Word e Abiword não 
     são boas escolhas para editar arquivos PHP. Se você deseja usar um desses 
     para testar seus scripts, você precisa verificar se você está salvando os 
     arquivos como TEXTO PLANO ou o PHP não irá ser capaz de ler e executar o seu script.
    </para>
   </note>
   
   <note>
    <title>Uma Nota sobre o Bloco de Notas do Windows</title>
    <para>    
     Se você está escrevendo seus scripts PHP usando o Bloco de Notas do Windows, 
     você precisará verificar que os arquivos estão sendo salvos com a extensão 
     .php. (O Bloco de Notas do Windows adiciona automaticamente a extensão .txt 
     aos arquivos a não ser que você siga um dos passos a seguir para previnir isto). 
     Quando a caixa de diálogo Salvar estiver aberta e você for digitar o nome do 
     seu arquivo, coloque o nome do arquivo entre aspas (i.e. "<filename>ola.php</filename>"). Uma alternativa é você
     clicar na lista drop-down 'Documentos de Texto' na caixa de diálogo salvar e alterar para "Todos os
     tipos de arquivos". Você agora pode digitar o nome do seu arquivo sem usar as aspas.
    </para>
   </note>
  
   <para>
    Agora que você criou com sucesso um script simples em PHP, é hora de criar 
    o mais famoso dos scripts PHP! Uma chamada à função <function>phpinfo</function> 
    e você verá todas as informações sobre seu sistema e configurações disponíveis 
    como a de <link linkend="language.variables.predefined">Variáveis Pré-definidas</link>, 
    módulos carregados pelo PHP, e as opções de <link linkend="configuration">configuração</link>. 
    Tire algum tempo para ver e rever estas informações
    importantes.
   </para>
   <para>
    <example>
     <info><title>Como obter informações sobre o PHP</title></info>
     <programlisting role="php">
<![CDATA[
<?php phpinfo(); ?>
]]>
     </programlisting>
    </example>
   </para>
  </section>

  <section xml:id="tutorial.useful">
   <title>Algo Útil</title>
   <para>
    Vamos fazer alguma coisa um pouco mais útil agora. Nós iremos checar 
    qual é o tipo de navegador que o visitante está utilizando para ver 
    a nossa página. De fato, para fazer isto nós teremos que checar 
    qual é o valor da string agente que o navegador envia como parte de 
    sua requisição HTTP. Esta informação é armazenada em uma <link
    linkend="language.variables">variável</link>. Variáveis sempre 
    começam com um símbolo de cifrão no PHP. A variável que nos interessa no momento é a <varname>$_SERVER["HTTP_USER_AGENT"]</varname>.
   </para>
   <note>
    <para>
     <varname>$_SERVER</varname> é uma variável 
     especial reservada do PHP que contém todas as informações sobre o servidor web. 
     Ela é conhecida como uma Auto-Global (ou Superglobal). Veja a página do manual 
     relacionada as <link linkend="language.variables.superglobals">Auto-globais</link>
     para mais informações. Estas variáveis especiais foram introduzidas no PHP
     <link xlink:href="&url.php.release4.1.0;">4.1.0</link>.  Antes desta versão, nós usávamos
     os velhos arrays <varname>$HTTP_*_VARS</varname>,
     como o <varname>$HTTP_SERVER_VARS</varname>. A partir do 5.4.0
     essas variáveis antigas foram removidas (veja a nota abaixo sobre
     <link linkend="tutorial.oldcode">código antigo</link>.)
    </para>
   </note>
   <para>
    Para chamar esta variável, nós podemos fazer isto:
   </para>
   <para>
    <example>
    <title>Imprimindo a variável (Elemento Array)</title>
    <programlisting role="php">
<![CDATA[
<?php
echo $_SERVER['HTTP_USER_AGENT'];
?>
]]>
    </programlisting>
    <para>
     Um exemplo de saída deste script poderia ser:
    </para>
     <screen role="html">
Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)
     </screen>
   </example>
   </para>
   <para>
    Há muitos <link linkend="language.types">tipos</link> de 
    variáveis disponíveis no PHP. No exemplo acima nós escrevemos 
    um elemento <link linkend="language.types.array">Array</link>. 
    Arrays podem ser muito úteis.
   </para>
   <para>
    <varname>$_SERVER</varname> é somente uma das variáveis que é automaticamente 
    disponibilizada pelo PHP. A lista dessas variáveis pode ser vista na seção
    <link linkend="reserved.variables">Variáveis Reservadas</link>
    do manual, ou obtida do restulado da
    função <function>phpinfo</function> utilizada no exemplo
    anterior.
   </para>
   <para>
    Você pode colocar múltiplas declarações PHP dentro da tag PHP e 
    criar pequenos blocos de códigos que fazem muito mais do que um 
    simples echo. Por exemplo, se você quer checar se o navegador é 
    o Internet Explorer faça algo como isso:
   </para>
   <para>
    <example>
     <info><title>Exemplo utilizando <link linkend="language.control-structures">estruturas
     de controle</link> e <link linkend="language.functions">funções</link></title></info>
     <programlisting role="php">
<![CDATA[
<?php
if (strpos($_SERVER['HTTP_USER_AGENT'], 'MSIE') !== FALSE) {
    echo 'You are using Internet Explorer.<br />';
}
?>
]]>
     </programlisting>
     <para>
      Um exemplo de Saída seria:
     </para>
     <screen role="html">
<![CDATA[
You are using Internet Explorer.<br />
]]>
     </screen>
    </example>
   </para>
   <para>
    Aqui nós introduzimos alguns conceitos novos. Nós temos a 
    declaração <link linkend="control-structures.if">if</link>. 
    Se você é familiar com a sintaxe básica usada pela linguagem C isto
    parecerá ser lógico para você. Se não você provavelmente
    deve ver um livro introdutório de PHP e ler os 
    capítulos iniciais, ou ainda ler a seção <link linkend="langref">Referência da
    Linguagem</link> do manual.
   </para>
   <para>
    O segundo conceito que iremos abordar é a chamada à função <function>strpos</function>.
    A função <function>strpos</function> vem junto com o PHP, ela faz uma busca 
    em uma palavra por uma outra palavra. Neste caso nós
    procuramos pelo texto <literal>"MSIE"</literal> dentro de
    <varname>$_SERVER["HTTP_USER_AGENT"]</varname>. Se
    a palavra for encontrada, a função retorna a posição do
    texto pesquisado em relação ao começo do texto onde houve a pesquisa. Se não encontrar
    a função retorna &false;. Nesse exemplo, se não retornar &false; o <link
    linkend="control-structures.if">if</link> avalia para &true;
    e o código dentro dos {colchetes} é executado. Caso contrário o código não
    roda. Tente criar exemplos similares
    com <link linkend="control-structures.if">if</link>, 
    <link linkend="control-structures.else">else</link>, e outras
    funções como <function>strtoupper</function> e
    <function>strlen</function>. Cada página relacionada contém
    exemplos. Se você estiver incerto em como utilizar funções você deve olhar
    as páginas sobre <link linkend="about.prototypes">como ler uma
    definição de função</link> e a seção sobre
    <link linkend="language.functions">funções do PHP</link>.
   </para>
   <para>
    Nós podemos avançar agora e mostrar a você como alternar entre os modos 
    PHP mesmo que você esteja executando blocos de códigos:
   </para>
   <para>
    <example>
     <title>Mesclando entre os modos PHP e HTML</title>
     <programlisting role="php">
<![CDATA[
<?php
if (strpos($_SERVER['HTTP_USER_AGENT'], 'MSIE') !== FALSE) {
?>
<h3>strpos() must have returned non-false</h3>
<p>You are using Internet Explorer</p>
<?php
} else {
?>
<h3>strpos() must have returned false</h3>
<p>You are not using Internet Explorer</p>
<?php
}
?>
]]>
     </programlisting>
     <para>
      Um exemplo de saída deste script poderia ser:
     </para>
     <screen role="html">
<![CDATA[
<h3>strpos() must have returned non-false</h3>
<p>You are using Internet Explorer</p>
]]>
     </screen>
    </example>
   </para>
   <para>
    Ao invés de usar a declaração echo do PHP para imprimir a saída dos dados, nós saímos do 
    modo do PHP e usamos o HTML normal. O importante à notar aqui
    é que a lógica do script continua intacta. Somente 
    alguns blocos HTML será enviados dependendo do
    resultado da chamada a <function>strpos</function> retornar. Em outras palavras, depende
    se a palavra <literal>MSIE</literal> for encontrada ou não.
   </para>
  </section>
   
  <section xml:id="tutorial.forms">
   <title>Tratando Formulários</title>
   <para>
    Uma das características mais fortes do PHP é o jeito como ele trata 
    formulários HTML. O conceito básico que é importante entender é que qualquer 
    elemento de formulário em um formulário irá automaticamente ficar disponível 
    para você usá-los em seus scripts PHP. Por favor leia a seção 
    <link linkend="language.variables.external">Variáveis externas do PHP</link> 
    para mais informações e exemplos de como usar formulários com PHP. Aqui vai um 
    exemplo:
   </para>
   <para>
    <example>
     <title>Um simples formulário HTML</title>
     <programlisting role="html">
<![CDATA[
<form action="action.php" method="post">
 <p>Your name: <input type="text" name="name" /></p>
 <p>Your age: <input type="text" name="age" /></p>
 <p><input type="submit" /></p>
</form>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Não há nada de especial neste formulário. É um formulário HTML comum 
    sem nenhuma tag especial de qualquer tipo. Quando o usuário preencher este 
    formulário e clicar no botão enviar, a página <filename>action.php</filename> 
    é chamada. Neste arquivo nós teremos algo como este:
   </para>
   <para>
    <example>
     <title>Imprimindo dados de nosso formulário</title>
     <programlisting role="php">
<![CDATA[
Hi <?php echo htmlspecialchars($_POST['name']); ?>.
You are <?php echo (int)$_POST['age']; ?> years old.
]]>
     </programlisting>
     <para>
      Um exemplo de saída deste script seria:
     </para>
     <screen role="html">
<![CDATA[
Hi Joe. You are 22 years old.
]]>
     </screen>
    </example>
   </para>
   <para>
    Para além de <function>htmlspecialchars</function> e
    <literal>(int)</literal>, deve ser óbvio que esse isso faz.
    <function>htmlspecialchars</function> transforma caracteres que sejam
    especiais no HTML na sua forma codificada, de forma que não seja possível injetar tags HTML
    ou JavaScript em sua página. O campo age (idade), por ser um
    número, pode-se simplesmente <link linkend="language.types.typecasting">converter</link> 
    para um <type>integer</type> que automaticamente eliminará qualquer
    letra. Você também pode fazer o PHP automaticamente fazer isso
    utilizando a extensão <link linkend="ref.filter">filter</link>.
    As variáveis <varname>$_POST['name']</varname> e <varname>$_POST['age']</varname>
    são criadas automaticamente pelo PHP. Anteriormente
    utilizamos <varname>$_SERVER</varname> e acima
    mostramos que <varname>$_POST</varname>
    contem todos os dados POST. Perceba como o 
    <emphasis>method</emphasis> (modo) do formulário é POST. Se fosse utilizado
    o modo <emphasis>GET</emphasis> então os dados do formulário acabariam na
    superglobal <varname>$_GET</varname>.
    Você também pode utilizar a superglobal <varname>$_REQUEST</varname>,
    se não se importar qual a origem do dado enviado. Ele
    conterá os dados mesclados de origens GET, POST e COOKIE.
   </para>
   <para>
    Você também pode utilizar XForms no PHP, embora deva se familiarizar
    com os formulários HTML clássicos primeiro.
    Embora trabalhar com XForms não seja para iniciantes, você pode se interessar
    por eles. Há uma seção sobre <link linkend="features.xforms">rápida introdução sobre
    manipular dados recebidos de XForms</link> no manual. 
   </para>
  </section>
  
  <section xml:id="tutorial.oldcode">
   <title>Usando códigos antigos com a nova versão do PHP</title>
   <para>
    Agora que o PHP cresceu e é uma linguagem de script popular, há recursos públicos 
    que contém código que você pode reusar em seus próprios scripts. Os
    desenvolvedores do PHP tentaram largamente manter a compatibilidade,
    para que um script escrito em uma versão mais antiga do PHP (deva) rodar
    sem nenhuma alteração em uma versão mais nova do PHP. Na prática algumas alterações serão geralmente necessárias.
   </para>
   <para>
    Duas das coisas mais importantes recentemente alteradas que afetam um código antigo é:
    <itemizedlist>
     <listitem>
      <simpara>
       O velho método de utilizar <varname>$HTTP_*_VARS</varname> não está disponível
       desde o 5.4.0. Os
       <link linkend="language.variables.superglobals">arrays superglobais</link>
       foram introduzidos no PHP <link xlink:href="&url.php.release4.1.0;">4.1.0</link>. 
       São eles: <varname>$_GET</varname>, <varname>$_POST</varname>, 
       <varname>$_COOKIE</varname>, <varname>$_SERVER</varname>, 
       <varname>$_FILES</varname>, <varname>$_ENV</varname>,
       <varname>$_REQUEST</varname> e <varname>$_SESSION</varname>.  
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Variáveis externas não são mais registradas no escopo global por
       padrão. Em outras palavras, com o PHP
       <link xlink:href="&url.php.release4.2.0;">4.2.0</link> a diretiva 
       <link linkend="ini.register-globals">register_globals</link> está  
       <emphasis>desligada</emphasis> por padrão no arquivo &php.ini;. O método utilizado 
       atualmente é o de acessar estes valores via arrays auto-globais como mencionado
       acima. Scripts antigos, livros, e tutoriais podem estar utilizando a diretiva ligada. Se ela 
       estiver <literal>on</literal> (ligada). Se a diretiva estivesse <literal>on</literal>,
       por exemplo, seria possível utilizar a variável <varname>$id</varname> da URL
       <literal>http://www.example.com/foo.php?id=42</literal>. A diretiva estando ligada
       ou desligada, <varname>$_GET['id']</varname> sempre está disponível.
      </simpara>
     </listitem>
    </itemizedlist>
    Para mais detalhes destas alterações, veja a seção 
    <link linkend="language.variables.predefined">variáveis pré-definidas</link>
    e links associados.
   </para>
  </section>
  
  <section xml:id="tutorial.whatsnext">
   <title>O que vem a seguir?</title>
   <para>
    Com esse conhecimento deve ser possível entender a maioria do
    manual, além de vários scripts de exemplo disponíveis nessas
    páginas.
   </para>
   <para>
    Para ver várias apresentações do que mais o PHP pode fazer,
    veja os site de materias de conferência em: 
    <link xlink:href="&url.php.talks;">&url.php.talks;</link>
   </para>
  </section>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
