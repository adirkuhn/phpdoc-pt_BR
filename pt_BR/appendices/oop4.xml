<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 324459 Maintainer: lcobucci Status: ready --><!-- CREDITS: brunoric, lcobucci -->
 <appendix xml:id="oop4" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Classes e Objetos (PHP 4)</title>

  <sect1 xml:id="keyword.class">
   <title><literal>class</literal></title>
   <para>
    Uma classe é uma coleção de variáveis e funções que trabalham com estas
    variáveis. As variáveis são definidas com a palavra chave <literal>var</literal>
    e funções com a palavra chave <literal>function</literal>. Uma classe
    é declarada utilizando a seguinte sintaxe:
   </para>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
class Cart {
    var $items;  // Itens no seu carrinho

    // Adiciona $num artigos com $artnr ao carrinho

    function add_item($artnr, $num) {
        $this->items[$artnr] += $num;
    }

    // Remove $num artigos de $artnr do seu carrinho

    function remove_item($artnr, $num) {
        if ($this->items[$artnr] > $num) {
            $this->items[$artnr] -= $num;
            return true;
        } elseif ($this->items[$artnr] == $num) {
            unset($this->items[$artnr]);
            return true;
        } else {
            return false;
        }
    }
}
?>
]]>
     </programlisting>
    </informalexample>
   </para>
 
   <para>
    Isto define a classe chamada Cart que consiste em um array associativo
    de artigos no carrinho e duas funções para adicionar e remover itens
    deste carrinho.
   </para>

   <warning>
    <simpara>
     Você <emphasis>não</emphasis> pode quebrar uma definição de classe
     em múltiplos arquivos. Você também <emphasis>não</emphasis> pode quebrar uma definição de
     classe em múltiplos blocos de PHP, exceto que esta quebra se dê dentro da
     declaração de um método. O código a seguir não irá funcionar:
    </simpara>
    <para>
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
class test {
?>
<?php
    function test() {
        print 'OK';
    }
}
?>
]]>
      </programlisting>
     </informalexample>
    </para>
    <simpara>
     Todavia, o código abaixo é permitido:
    </simpara>
    <para>
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
class test {
    function test() {
        ?>
        <?php
        print 'OK';
    }
}
?>
]]>
      </programlisting>
     </informalexample>
    </para>
   </warning>

   <simpara>
    As seguintes notas de advertência são válidas para PHP 4.
   </simpara>
    
   <caution>
    <simpara>
     O nome <literal>stdClass</literal> é utilizado internamente pelo motor Zend
     e é reservado. Você não pode criar uma classe chamada
     <literal>stdClass</literal> em PHP.
    </simpara>
   </caution>
    
   <caution>
    <simpara>
      Os nomes de função <literal>__sleep</literal> e
      <literal>__wakeup</literal> são métodos mágicos no PHP. Você
      não deve ter métodos com estes nomes em nenhuma de suas classes,
      a não ser que você queira se aproveitar da funcionalidade
      mágica associadada a eles. Veja abaixo mais informações.
    </simpara>
   </caution>
    
   <caution>
    <simpara>
      O PHP reserva todos os nomes de funções iniciados com <literal>__</literal> como mágicos.
      É recomendado que você não crie funções com prefixo
      <literal>__</literal> em PHP, a não ser que você queira utilizer as funcionalidades mágicas documentadas.
    </simpara>
   </caution>

   <simpara>
    No PHP 4, apenas são permitidos inicializadores constantes de variáveis
    através da palavra-chave <literal>var</literal>. Para inicializar variáveis com
    algum valor não constante, você precisa de uma função de inicialização que é
    automaticamente executado na inicialização de um novo objeto
    da classe. Esse tipo de função é chamada de construtor (veja o exemplo abaixo):
   </simpara>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
class Cart {
    /* Estas inicializações NÃO funcionam no PHP 4. */
    var $todays_date = date("Y-m-d");
    var $name = $firstname;
    var $owner = 'Fred ' . 'Jones';
    /* Arrays contendo valores constantes funcionarão. */
    var $items = array("VCR", "TV");
}

/* Esta é a maneira como deve ser feito no PHP4. */
class Cart {
    var $todays_date;
    var $name;
    var $owner;
    var $items = array("VCR", "TV");

    function Cart() {
        $this->todays_date = date("Y-m-d");
        $this->name = $GLOBALS['firstname'];
        /* etc. . . */
    }
}
?>
]]>
    </programlisting>
   </informalexample>

   <para>
    Classe são tipos, isto é, elas são modelos para objetos (variáveis). Para criar
    um objeto você deve atribuir a uma variável uma nova instância classe desejada
    utilizando o operador <literal>new</literal>.
   </para>
 
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$cart = new Cart;
$cart->add_item("10", 1);

$another_cart = new Cart;
$another_cart->add_item("0815", 3);
?>
]]>
    </programlisting>
   </informalexample>
 
   <para>
    O código acima cria os objetos <varname>$cart</varname> e
    <varname>$another_cart</varname>, ambos da classe Cart. A função
    <literal>add_item()</literal> do objeto<varname>$cart</varname> está sendo chamada para adicionar 1
    item do artigo de número 10 ao carrinho <varname>$cart</varname>. 3 itens do
    artigo de número 0815 são adicionados ao carrinho <varname>$another_cart</varname>.
   </para>
   
   <para>
    Ambos, <varname>$cart</varname> e <varname>$another_cart</varname>, possuem
    as funções <literal>add_item()</literal>, <literal>remove_item()</literal>
    e a variável (propriedade) <varname>items</varname>. Estas são funções e variáveis distintas em cada objeto. Você pode
    pensar nos objetos como algo semelhante a diretórios em um sistema de arquivos.
    Em um sistema de arquivos você pode possuir dois arquivos diferentes
    chamados <filename>README.TXT</filename>, desde que estejam em diretórios diferentes.
    Assim como os diretórios onde você têm de utilizar o nome completo do caminho
    para encontrar cada arquivo na hierarquia do sistema, você deve especificar
    o nome completo da função que você deseja chamar: em termos do PHP, o diretório
    raiz será o namespace global e o separador de pastas
    será <literal>-&gt;</literal>. Deste modo,
    os nomes <varname>$cart-&gt;items</varname> e
    <varname>$another_cart-&gt;items</varname> nomeiam diferentes variáveis.
    Note que a variável é chamada <varname>$cart-&gt;items</varname>, não
    <varname>$cart-&gt;$items</varname>, isto é a variável em PHP só possui
    um único dólar (<literal>$</literal>).
   </para>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
// correto, um único $
$cart->items = array("10" => 1); 

// inválido, porque $cart->$items se torna $cart->""
$cart->$items = array("10" => 1);

// correto, mas pode ou não ser a real intençaõ:
// $cart->$myvar se torna $cart->items
$myvar = 'items';
$cart->$myvar = array("10" => 1);  
?>
]]>
    </programlisting>
   </informalexample>

   <para>
    Em uma definição de classe, você não sabe com qual nome seu objeto será
    instanciado em seu programa: quando a classe Cart foi
    escrita, não se sabia se o objeto iria se chamar
    <varname>$cart</varname>, <varname>$another_cart</varname>, ou qualquer
    outro nome. Desse modo você não
    pode escrever <varname>$cart-&gt;items</varname> no próprio
    código da classe Cart. Ao invés disso, para acessar as próprias funções e variáveis
    de uma classe de dentro da própria classe, você pode utilizar a pseudo-variável 
    <varname>$this</varname> a qual pode ser lida como 'meu(minha) próprio(a)' ou 'objeto
    corrente'. Assim, '<varname>$this-&gt;items[$artnr]</varname> +=
    <varname>$num</varname>' pode ser lido como 'adicione <varname>$num</varname>
    ao contador <varname>$artnr</varname> de itens do meu próprioarray' ou 'adicione
    <varname>$num</varname> ao contador <varname>$artnr</varname> do array items
    do objeto corrente'.
   </para>

   <note>
    <para>
     A pseudo-variável <varname>$this</varname> geralmente não é definida em um método
     que seja chamado estaticamente. Isto não é,
     no entanto, uma regra estrita: <varname>$this</varname> é definida caso um método
     é chamado estáticamente por meio de outro objeto. Nesta situação o valor de
     <varname>$this</varname> será o objeto que está efetuando a chamada. Isso é
     ilustrado no exemplo a seguir:
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
class A
{
    function foo()
    {
        if (isset($this)) {
            echo '$this foi definido (';
            echo get_class($this);
            echo ")\n";
        } else {
            echo "\$this não foi definido.\n";
        }
    }
}

class B
{
    function bar()
    {
        A::foo();
    }
}

$a = new A();
$a->foo();
A::foo();
$b = new B();
$b->bar();
B::bar();
?>
]]>     
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
$this foi definido (a)
$this não foi definido.
$this foi definido (b)
$this não foi definido.
]]>
      </screen>
     </informalexample>
    </para>
   </note>

   <note>
    <para>
     Existem algumas funções interessantes para manipular classes e objetos. Você pode
     querer dar uma olhada em <link linkend="ref.classobj">Funções para
     Classes/Objetos</link>.
    </para>
   </note>
  </sect1>
  
  <sect1 xml:id="keyword.extends">
   <title><literal>extends</literal></title>

   <para>
    Frequentemente você necessita de classes com variáveis e funções similares a outra
    classe existente. De fato é uma boa pratica definir
    classes genéricas que possam ser reutilizadas em seus
    projetos e adaptadas para necessidades de cada
    projeto específico. Para facilitar isto, classes podem ser
    extensões de outras classes. Uma classe estendida ou derivada
    tem todos os métodos (funções), variáveis (propriedades/atributos) da classe base (isto é
    chamado de 'herança', independentemente do fato de ninguém ter morrido) e aquilo
    que você adicionar na definição da classe. Não é possível tirar coisas
    de uma classe base, ou seja, indefinir qualquer
    método ou variável presente nela. Uma classe estendida é sempre dependente
    de uma única classe base, ou seja, a herença múltipla não é
    suportada. Classes são estendidas utilizando-se a palavra-chave '<literal>extends</literal>'.
   </para>
 
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
class Named_Cart extends Cart {
    var $owner;
  
    function set_owner ($name) {
        $this->owner = $name;
    }
}
?>
]]>
    </programlisting>
   </informalexample>
 
   <para>
    Isto define a classe Named_Cart que possui todas as variáveis e funções da classe
    Cart, além de também possuir, adicionalmente, a variável <varname>$owner</varname>
    e o método <literal>set_owner()</literal>. Você pode criar um Named_Cart da maneira usual e
    agora atribuir e resgatar o seu dono. Você pode ainda utilizar as funções
    presentes na classe Cart normalmente:
   </para>
 
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$ncart = new Named_Cart;    // Cria um objeto do tipo Named_Cart
$ncart->set_owner("kris");  // Atribui um valor para $owner
print $ncart->owner;        // Imprime o nome do dono ($owner) da classe
$ncart->add_item("10", 1);  // (funcionalidade herdada da classe Cart)
?>
]]>
    </programlisting>
   </informalexample>

   <para>
    Isto é também chamado de relação 'pai-filho'. Você cria uma 
    classe 'pai' e utiliza <literal>extends</literal> para criar nova classe
    <emphasis>com base</emphasis> na classe 'pai': a classe filha. Você pode
    inclusive utilizar criar novas classes baseadas
    nesta classe 'filho'.
   </para>
   <note>
    <para>
     Classes devem ser definidas antes de serem utilizadas! Se você deseja que a classe
     <literal>Named_Cart</literal> estenda a classe
     <literal>Cart</literal>, você precisa definir a classe
     <literal>Cart</literal> primeiro. Se você deseja criar outra classe chamada
     <literal>Yellow_named_cart</literal> baseada na classe 
     <literal>Named_Cart</literal> você deve definir a classe
     <literal>Named_Cart</literal> primeiro. Em resumo: a ordem que as classes são definidas
     é importante.
    </para>
   </note>
  </sect1>

  <sect1 xml:id="oop4.constructor">
   <title>Construtores</title>

   <para>
    Construtores são funções em uma classe que são automaticamente
    chamadas quando você cria uma nova instância de uma classe utilizando o operador
    <literal>new</literal>. Um método se torna um construtor,
    quando ele possui o mesmo nome que sua classe. Se uma classe
    não tem método construtor, o construtor da classe base (classe 'pai')
    será então chamado, se existir.
   </para>
 
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
class Auto_Cart extends Cart {
    function Auto_Cart() {
        $this->add_item("10", 1);
    }
}
?>
]]>
    </programlisting>
   </informalexample>
 
   <para>
    Isto define a classe Auto_Cart que é um Cart com a adição de um construtor
    que inicializa o carrinho com um item do artigo de número "10" toda vez
    que um novo Auto_Cart é criado utilizando "<literal>new</literal>". Construtores
    podem receber argumentos e estes podem ser opcionais, o que os tornam
    muito mais úteis. Para ser possível utilizar a classe sem parâmetros, todos os
    parâmetros do construtor devem ser criados como opicionais atribuindo-se valores
    padrões para os mesmos.
   </para>
 
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
class Constructor_Cart extends Cart {
    function Constructor_Cart($item = "10", $num = 1) {
        $this->add_item ($item, $num);
    }
}
 
// Utilizando os valores padrões presentes no construtor
$default_cart = new Constructor_Cart;
 
// Setando novos parâmetros
$different_cart = new Constructor_Cart("20", 17);
?>
]]>
    </programlisting>
   </informalexample>

   <para>
    Você também pode utilizar o operador <literal>@</literal> para 
    <emphasis>esconder</emphasis> os erros que podem ocorrer no construtor, ex.:
    <literal>@new</literal>.
   </para>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
class A
{
    function A()
    {
        echo "Eu sou o construtor de A.<br />\n";
    }

    function B()
    {
        echo "Eu sou um método qualquer chamado B pertencente a classe A.<br />\n";
        echo "Eu não sou o construtor de A.<br />\n";
    }
}

class B extends A
{
}

// Isto irá chamar B() como o construtor de B.
$b = new B;
?>
]]>
    </programlisting>
   </informalexample>
   
   <para>
    O método B() da classe A irá se tornar o construtor da classe B,
    apesar de que essa talvez não fosse a real intenção.
    O PHP 4 não se importa se o método foi
    definido na classe B ou se foi herdado.
   </para>
   
   <caution>
    <simpara>
     O PHP não chama automaticamente os construtores das classes bases
     em um construtor de uma classe derivada. É de sua
     responsabilidade propagar a chamada apropriadamente,
     sempre que ache necessário.
    </simpara>
   </caution>
   
   <para>
    Destrutores são métodos que são chamados automaticamente quando um objeto
    é destruido, seja via <function>unset</function> ou simplesmente pela finalização
    do escopo. Não existem destrutores em PHP. Você pode utilizar 
    <function>register_shutdown_function</function> para simular a maioria dos
    efeitos dos destrutores.
   </para>
  </sect1>

 <sect1 xml:id="keyword.paamayim-nekudotayim"><!-- :-) -->
   <title>Operador de resolução de escopo (<literal>::</literal>)</title>

   <caution>
    <simpara>
     Isto é válido somente para o PHP 4 e versões posteriores.
    </simpara>
   </caution>

   <para>
    Algumas vezes é útil se referir a funções e variáveis
    declarados na classe base, ou se referir a funções em classes que
    ainda não possuem instâncias. O operador <literal>::</literal>
    é utilizado para isso.
   </para>
   
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
class A {
    function example() {
        echo "Eu sou o método original A::example().<br />\n";
    }
}

class B extends A {
    function example() {
        echo "Eu sou o método redefinido B::example().<br />\n";
        A::example();
    }
}

// Não existe um objeto da classe A mas ainda sim o método 
// será executado e imprimirá
// Eu sou o método original A::example().<br />
A::example();

// Criando um objeto da classe B.
$b = new B;

// Isto irá imprimir
//   Eu sou o método redefinido B::example().<br />
//   Eu sou o método original A::example().<br />
$b->example();
?>
]]>
    </programlisting>
   </informalexample>

   <para>
    O exemplo acima chama o método <literal>example()</literal> presente na 
    classe A, mas não existe um objeto instanciado da classe A, desse modo
    nós não podemos escrever <literal>$a->example()</literal>. Ao invés disso
    chamamos <literal>example()</literal> como uma 'função de classe',
    ou seja, como uma função da própria classe e não de algum objeto (instância)
    da classe.
   </para>
   
   <para>
    Existem 'funções de classe' mas não existem 'variáveis de classe'. De fato, não
    existe nenhum objeto no momento da chamada. Assim, a 'função de classe' não pode
    utilizar-se de nenhuma das variáveis (propriedades) da classe (mas pode utilizar-se
    variáveis locais ou globais) e não pode possuir chamadas utilizando
    <varname>$this</varname>.
   </para>

   <para>
    No exemplo acima, a classe B redefine a função <literal>example()</literal>. 
    A definição original presente na classe A é sobrescrita e não está mais disponível,
    a não ser que você se refira explicitamente à implementação de 
    <literal>example()</literal> na classe A utilizando o operador ::.
    Escreva <literal>A::example()</literal> para fazer isto (de fato, você poderia utilizar
    <literal>parent::example()</literal>, como demonstrado na seção
    seguinte).
   </para>
   
   <para>
    Neste contexto, existe um objeto corrente e este pode possuir variáveis.
    Assim, quando utilizado dentro de um método de um objeto, você pode utilizar
    <varname>$this</varname> bem como as variáveis de objeto.
   </para>

 </sect1>

 <sect1 xml:id="keyword.parent">
   <title><literal>parent</literal></title>

  <para>
   Você pode encontrar-se escrevendo códigos que se referem
   a variáveis e funções em classes pais. Isto é
   particularmente verdade se sua classe derivada é um refinamento
   ou especialização do código da classe pai.
  </para>
  
  <para>
   Ao invés de utilizar o nome literal da classe pai em seu código,
   você pode utilizar o nome especial
   <literal>parent</literal>, o qual se refere ao nome
   da classe base utilizada após a declaração <literal>extends</literal>
   em sua classe. Fazendo isto, você evita a utilização do
   nome da sua classe base em mais de um lugar. Caso sua
   hierarquia de classes altere durante o desenvolvimento do projeto,
   o impacto é baixo e necessita apenas alterar a declaração
   <literal>extends</literal> da sua classe.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
class A {
    function example() {
        echo "Eu sou A::example() e promovo funcionalidade básica.<br />\n";
    }
}

class B extends A {
    function example() {
        echo "Eu sou B::example() e promovo funcionalidade adicional.<br />\n";
        parent::example();
    }
}

$b = new B;

// Isto irá chamar B::example(), a qual irá chamar A::example().
$b->example();
?>
]]>
   </programlisting>
  </informalexample>
 </sect1>

 <sect1 xml:id="oop4.serialization">
  <title>Serialização de objetos - objetos na sessão</title>

  <para>
   A função <function>serialize</function> retorna uma string
   contendo uma representação de stream de bytes de qualquer valor
   que pode ser persistido em PHP. A função <function>unserialize</function>
   pode utilizar-se desta string para recriar o valor original. Utilizando
   serialização para persistir um objeto, salva todas as variáveis deste
   objeto. As funções em um objeto não serão persistidas,
   somente o nome da classe.
  </para>
  
  <para>
   Para ser capaz utilizar a função <function>unserialize</function> em um objeto
   a classe deste objeto precisa estar definida. Isto é, se você possui um objeto
   <varname>$a</varname> de uma classe A em <filename>page1.php</filename> e o serializa,
   você irá possuir uma string que se refere à classe A contendo os valores das 
   variáveis atribuídos em <varname>$a</varname>. Se você deseja ser capaz de deserializar
   isto em <filename>page2.php</filename>, recriando <varname>$a</varname> da classe A,
   a definição da classe A precisa estar presente em <filename>page2.php</filename>.
   Isto pode ser feito por exemplo ao se gravar a definição da classe A em um arquivo e 
   o incluí-lo em ambos os arquivos 
   <filename>page1.php</filename> e <filename>page2.php</filename>.
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// classa.inc:
  
  class A {
      var $one = 1;
    
      function show_one() {
          echo $this->one;
      }
  }
  
// page1.php:

  include("classa.inc");
  
  $a = new A;
  $s = serialize($a);
  // grava $s em algum lugar onde page2.php possa acessá-lo.
  $fp = fopen("store", "w");
  fwrite($fp, $s);
  fclose($fp);

// page2.php:
  
  // isto é necesário para a deserialização ocorrer corretamente.
  include("classa.inc");

  $s = implode("", @file("store"));
  $a = unserialize($s);

  // agora utilize a função show_one() do objeto $a.  
  $a->show_one();
?>
]]>
   </programlisting>
  </informalexample>
  
  <para>
   Se você está utilizando sessões e a função <function>session_register</function>
   para registrar objetos, estes objetos são serializados automaticamente
   ao final de cada página PHP, e deserializados automaticamente no início das
   páginas seguintes. Isto basicamente significa que estes objetos podem
   ser utilizados em qualquer parte de suas páginas por fazerem parte
   de sua sessão.
  </para>
  
  <para>
   É fortemente recomentado que você inclua as definições
   das classes de todos os objetos registrados em todas as
   páginas, mesmo que você não vá utilizá-lo em todas as
   suas páginas. Se você não o fizer e um objeto
   for deserializado sem sua classe definida, ele
   perderá a associação com a classe e se tornará um objeto do tipo
   <classname>__PHP_Incomplete_Class_Name</classname> sem nenhuma função
   disponível, ou seja, se tornará praticamente inútil.
  </para>
  
  <para>
   Então se no exemplo acima <varname>$a</varname> se tornar parte da sessão ao 
   se executar <literal>session_register("a")</literal>, você deve incluir o arquivo 
   <literal>classa.inc</literal> em todas as suas páginas, não somente em <filename>page1.php</filename> e
   <filename>page2.php</filename>.
  </para>
 </sect1>

 <sect1 xml:id="oop4.magic-functions">
  <title>As funções mágicas <literal>__sleep</literal> e <literal>__wakeup</literal></title>

  <para>
   <function>serialize</function> verifica se sua classe possui um método com
   o nome mágico <literal>__sleep</literal>. Se houver, ele será
   executado antes de qualquer serialização. Ele pode ser utilizado para fazer uma
   limpeza no objeto, e é esperado que retorne um array com os nomes de todos as variáveis
   deste objeto que devem ser serializados.
   Caso o método não retorne nada, &null; será serializado e um
   <constant>E_NOTICE</constant> será lançado.
  </para>
  
  <para>
   O objetivo de uso do <literal>__sleep</literal> é confirmar dados pendentes
   ou realizar tarefas de limpezas. A função é também útil quando
   você está lidando com objetos muito grandes e que não precisam ser
   completamente salvos.
  </para>
  
  <para>
   No caso inverso, <function>unserialize</function> verifica a
   presença de um método com o nome mágico
   <literal>__wakeup</literal>. Caso exista, será chamado e poderá
   reconstruir qualquer recurso que este objeto pode ter.
  </para>
  
  <para>
    A inteção de utilização do <literal>__wakeup</literal> é
    reestabelecer quaisquer conexões com banco de dados que podem ter sido
    perdidas durante a serialização e realizar outras tarefas de
    reinicialização.
  </para>
 </sect1>
  
 <sect1 xml:id="oop4.newref">
   <title>Referencias dentro do construtor</title>
   <para>
    A criação de referencias dentro de construtores podem levar à resultados
    confusos. Esta seção-tutorial tem o objetivo de ajudar você a evitar problemas.
 
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
class Foo {
    function Foo($name) {
        // cria uma referencia dentro do array global $globalref
        global $globalref;
        $globalref[] = &$this;
        // altera o nome usando o valor passado
        $this->setName($name);
        // e envia ele ao output
        $this->echoName();
    }

    function echoName() {
        echo "<br />", $this->name;
    }
 
    function setName($name) {
        $this->name = $name;
    }
}
?>
]]>
    </programlisting>
   </informalexample>
  </para>
    
   <para>
    Vamos verificar se existe alguma diferença entre
    <varname>$bar1</varname>, que foi criado utilizando
    o operador de cópia <literal>=</literal>, e
    <varname>$bar2</varname>, que foi criado utilizando
    o operador de referencia <literal>=&amp;</literal>...

    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$bar1 = new Foo('alterado no construtor');
$bar1->echoName();
$globalref[0]->echoName();

/* saída:
alterado no construtor
alterado no construtor
alterado no construtor */

$bar2 =& new Foo('alterado no construtor');
$bar2->echoName();
$globalref[1]->echoName();

/* saída:
alterado no construtor
alterado no construtor
alterado no construtor */
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    Aparentemente não existe diferença alguma, mas na realidade existe
    uma bem significante: <varname>$bar1</varname> e
    <varname>$globalref[0]</varname> _NÃO_ são referencias, ou seja, NÃO
    são a mesma variável. Isso acontece porque "<literal>new</literal>" não
    returna uma referencia por padrão, mas sim uma cópia.
    <note>
     <simpara>
      Não existe qualquer perda de performance (a partir do PHP 4 é utilizada contagem
      de referencias) ao retornar cópias ao invés de referencias. Na realidade é
      bem o contrário, normalmente é melhor simplesmente trabalhar com cópias
      ao invés de referências, pois a criação de referências leva um
      certo tempo, ao passo que cópias virtuais não (a não ser que nenhum
      deles seja um grande array ou objeto e, ao alterar um deles, os outros
      devem ser alterados subsequentemente, nesse caso seria sábio utilizar
      referências para que todos sejam alterados simultâneamente).
     </simpara>
    </note>
    Para provar o que está escrito acima, vejamos o código abaixo.

    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
// agora nós iremos alterar o nome. o que você espera que aconteça?
// você pode achar que tanto $bar1 e $globalref[0] tenham seus nomes alterados...
$bar1->setName('alterado de fora');

// como dito antes, este não é o caso.
$bar1->echoName();
$globalref[0]->echoName();

/* saída:
alterado de fora
alterado no construtor */

// vamos ver a diferença no caso de $bar2 e $globalref[1]
$bar2->setName('alterado de fora');

// felizmente eles não são apenas iguais, mas sim as mesmas variáveis
// assim $bar2->name e $globalref[1]->name são também a mesma coisa
$bar2->echoName();
$globalref[1]->echoName();

/* saída:
alterado de fora
alterado de fora */
?>
]]>
     </programlisting>
    </informalexample>   
   </para>   
   <para>
   Outro exemplo final, para tentarmos entender isso tudo.
   
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
class A {
    function A($i) {
        $this->value = $i;
        // tente descobrir o motivo de não precisarmos de uma referencia aqui
        $this->b = new B($this);
    }

    function createRef() {
        $this->c = new B($this);
    }

    function echoValue() {
        echo "<br />","class ",get_class($this),': ',$this->value;
    }
}


class B {
    function B(&$a) {
        $this->a = &$a;
    }

    function echoValue() {
        echo "<br />","class ",get_class($this),': ',$this->a->value;
    }
}

// tente entender por que utilizar uma cópia simples levaria um
// resultado inesperado na linha marcada com um *
$a =& new A(10);
$a->createRef();

$a->echoValue();
$a->b->echoValue();
$a->c->echoValue();

$a->value = 11;

$a->echoValue();
$a->b->echoValue(); // *
$a->c->echoValue();

?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
class A: 10
class B: 10
class B: 10
class A: 11
class B: 11
class B: 11
]]>
     </screen>
    </informalexample>
   </para>
  </sect1>

  <sect1 xml:id="oop4.object-comparison">
   <title>Comparando objetos</title>
  <para>
   No PHP 4, objetos são comparados de uma maneira muito simples, isto é: Duas instâncias
   de objectos são iguais caso eles possuem os mesmos atributos e valores, e são
   instâncias da mesma classe. Regras similares são aplicadas quando comparamos dois
   objetos usando o operador de identidade (<literal>===</literal>).
  </para>
  <para>
   Se executássemos o código no exemplo abaixo:
   <example>
    <title>Exemplo de comparação de objetos no PHP 4</title>
    <programlisting role="php">
<![CDATA[
<?php
function bool2str($bool) {
    if ($bool === false) {
            return 'FALSE';
    } else {
            return 'TRUE';
    }
}

function compareObjects(&$o1, &$o2) {
    echo 'o1 == o2 : '.bool2str($o1 == $o2)."\n";
    echo 'o1 != o2 : '.bool2str($o1 != $o2)."\n";
    echo 'o1 === o2 : '.bool2str($o1 === $o2)."\n";
    echo 'o1 !== o2 : '.bool2str($o1 !== $o2)."\n";
}

class Flag {
    var $flag;

    function Flag($flag=true) {
            $this->flag = $flag;
    }
}

class SwitchableFlag extends Flag {

    function turnOn() {
        $this->flag = true;
    }

    function turnOff() {
        $this->flag = false;
    }
}

$o = new Flag();
$p = new Flag(false);
$q = new Flag();

$r = new SwitchableFlag();

echo "Compara instâncias criadas com os mesmos parâmetros\n";
compareObjects($o, $q);

echo "\nCompara instâncias criadas com parâmetros diferentes\n";
compareObjects($o, $p);

echo "\nCompara uma instância da classe pai e outra da classe filha\n";
compareObjects($o, $r);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[    
Compara instâncias criadas com os mesmos parâmetros
o1 == o2 : TRUE
o1 != o2 : FALSE
o1 === o2 : TRUE
o1 !== o2 : FALSE

Compara instâncias criadas com parâmetros diferentes
o1 == o2 : FALSE
o1 != o2 : TRUE
o1 === o2 : FALSE
o1 !== o2 : TRUE

Compara uma instância da classe pai e outra da classe filha
o1 == o2 : FALSE
o1 != o2 : TRUE
o1 === o2 : FALSE
o1 !== o2 : TRUE
]]>
    </screen>
   </example>   
   Este é a saída esperada de acordo com as regras de comparação explicadas
   acima. Apenas instâncias com o mesmo valor para seus atributos
   e que são da mesma classe são considerados iguais e identicos.
  </para>
  <para>
   As mesmas regras de comparação são aplicadas também no caso de possuirmos
   composição de objetos. No exemplo abaixo, criamos uma classe "container" que armazena
   um array associativo de objetos do tipo <classname>Flag</classname>.
   <example>
    <title>Comparação de objetos compostos no PHP 4</title>
    <programlisting role="php">
<![CDATA[
<?php
class FlagSet {
    var $set;

    function FlagSet($flagArr = array()) {
        $this->set = $flagArr;
    }

    function addFlag($name, $flag) {
        $this->set[$name] = $flag;
    }

    function removeFlag($name) {
        if (array_key_exists($name, $this->set)) {
            unset($this->set[$name]);
        }
    }
}


$u = new FlagSet();
$u->addFlag('flag1', $o);
$u->addFlag('flag2', $p);
$v = new FlagSet(array('flag1'=>$q, 'flag2'=>$p));
$w = new FlagSet(array('flag1'=>$q));

echo "\nComparação entre os objetos compostos u(o,p) e v(q,p)\n";
compareObjects($u, $v);

echo "\nu(o,p) e w(q)\n";
compareObjects($u, $w);
?>     
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Comparação entre os objetos compostos u(o,p) e v(q,p)
o1 == o2 : TRUE
o1 != o2 : FALSE
o1 === o2 : TRUE
o1 !== o2 : FALSE

u(o,p) e w(q)
o1 == o2 : FALSE
o1 != o2 : TRUE
o1 === o2 : FALSE
o1 !== o2 : TRUE
]]>
    </screen>
   </example>
  </para>
 </sect1>
 </appendix>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
