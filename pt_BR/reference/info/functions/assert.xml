<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 337862 Maintainer: ae Status: ready --><!-- CREDITS: fernandoc,ae --><!-- splitted from ./en/functions/info.xml, last change in rev 1.51 -->
<refentry xml:id="function.assert" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>assert</refname>
  <refpurpose>Confere se uma afirmação é &false;</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <para>PHP 5</para>
  <methodsynopsis>
   <type>bool</type><methodname>assert</methodname>
   <methodparam><type>mixed</type><parameter>assertion</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>description</parameter></methodparam>
  </methodsynopsis>
  <para>PHP 7</para>
  <methodsynopsis>
   <type>bool</type><methodname>assert</methodname>
   <methodparam><type>mixed</type><parameter>assertion</parameter></methodparam>
   <methodparam choice="opt"><type>Throwable</type><parameter>exception</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>assert</function> verifica a
   <parameter>assertion</parameter> informada e toma a ação apropriada se
   seu resultado é &false;.
  </para>
  <refsect2>
   <title>Asserts tradicionais (PHP 5 and 7)</title>
   <para>
    Se o parâmetro <parameter>assertion</parameter> é dado como uma string ela
    será avaliada como código PHP pela função <function>assert</function>.
    As vantagens de uma <parameter>assertion</parameter> string são menor sobrecarga
    na conferência se a afirmação é verdadeira e mensagens contendo
    <parameter>assertion</parameter> quando a afirmação é falsa. Isto indica que se 
    você passar uma condição booleana (verdadeiro ou falso) como
    <parameter>assertion</parameter> esta condição não será mostrada como parâmetro
    da função de assert, o qual você deve ter definido com a função
    <function>assert_options</function>, a condição é convertida para uma string antes
    que a função gerenciadora seja chamada e o booleano &false;
    é convertido para uma string vazia.
   </para>
   <para>
    Asserts devem ser usadas apenas com a intenção de eliminar erros apenas. Você deve
    usa-las  para testar condições que devam ser
    sempre &true; e que indiquem algum erro de programação
    ou para verificar a existência/disponibilidade de funções,
    extensões ou ainda de limites e recursos do sistema.
   </para>
   <para>
    Asserts não devem ser usadas para operações em tempo de execução normais como para
    conferir certo valor de entrada. Como uma dica de uso, o seu código deve funcionar
    corretamente mesmo que os asserts não estejam
    ativados.
   </para>
   <para>
    O funcionamento de <function>assert</function> pode ser configurado por
    <function>assert_options</function> ou pelas configurações descritas na pagina do
    manual para estas funções.
   </para>
   <para>
    A função <function>assert_options</function> e/ou a diretiva de configuração
    <constant>ASSERT_CALLBACK</constant> permitem configurar uma função para ser chamada no caso de
    falha da afirmação.
   </para>
   <para>
    <function>assert</function> callbacjs são particularmente 
    úteis quando estiver criando sistemas automáticos para testes porque permitem que você
    capture facilmente o código passado para a afirmação em conjunto com informações sobre
    onde a afirmação foi feita. Enquanto esta informação pode ser capturada por outros 
    métodos, usar afirmações torna muito mais
    fácil e rápido!
  </para>
   <para>
    A função de callback deve aceitar três argumentos. O primeiro
    irá conter o arquivo onde houve a falha na afirmação. O
    segundo argumento irá conter a linha onde a afirmação falhou e
    o terceiro argumento irá conter a expressão que falhou (se houver
    alguma &#x2014; valores literais como 1 or "dois" não serão passados nesse
    argumento). Usuários do PHP 5.4.8 e posteriores também devem providenciar um quarto
    argumento opcional, que conterá o
    <parameter>description</parameter> informado no <function>assert</function>
    it was set.
   </para>
  </refsect2>
  <refsect2 xml:id="function.assert.expectations">
   <title>Expectations (PHP 7 only)</title>
   <para>
    <function>assert</function> é um constructo de linguagem no PHP 7, permitindo
    a definição de expectativas: asserts que tem efeitos em ambientes de desenvolvimento
    e testes, mas que são removidos com custo zero
    em produção.
   </para>
   <para>
    Ainda que <function>assert_options</function> possa ser utilizado para controlar 
    comportamentos descritos acima por razões de compatibilidade reversa, o PHP 7
    somente deve usar duas novas diretivas para controlar
    o comportamento de <function>assert</function> e evitar chamar
    <function>assert_options</function>.
   </para>
   <table>
    <title>
     Diretivas de configuração para <function>assert</function> no PHP 7
    </title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>Diretiva</entry>
       <entry>Padrão</entry>
       <entry>Valores possíveis</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>
        <link linkend="ini.zend.assertions">zend.assertions</link>
       </entry>
       <entry><literal>1</literal></entry>
       <entry>
        <simplelist>
         <member>
          <literal>1</literal>: gera e executa código (modo de desenvolvimento)
         </member>
         <member>
          <!-- TODO: look up the RFC to figure out why you'd want this -->
          <literal>0</literal>: gera código, mas não o executa
         </member>
         <member>
          <literal>-1</literal>: não gera código (modo de produção)
         </member>
        </simplelist>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="ini.assert.exception">assert.exception</link>
       </entry>
       <entry><literal>0</literal></entry>
       <entry>
        <simplelist>
         <member>
          <literal>1</literal>: interrompe se o assert falhar, ou
          lançando a exceção fornecida no parâmetro <parameter>exception</parameter>
          ou lançando um objeto <classname>AssertionError</classname> se
          <parameter>exception</parameter> não tiver sido informado
         </member>
         <member>
          <literal>0</literal>: usa e gera um
          <classname>Throwable</classname> como descrito acima, mas somente
          gera um warning em baseado no objeto em vez de lançar a exceção
          (comportamento compatível com o PHP 5)
         </member>
        </simplelist>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </refsect2>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>assertion</parameter></term>
     <listitem>
      <para>
       A asserção. No PHP 5 isto precisa ser uma <type>string</type> a ser
       executada ou um <type>boolean</type> para ser testado. No PHP 7 pode ser
       também uma expressão que retorna valores, qual será executada e
       o resultado será usado para indicar se a asserção confirmou-se ou falhou.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>description</parameter></term>
     <listitem>
      <para>
       Uma descrição opctional que será incluída na mensagem de falha de
       caso de <parameter>assertion</parameter> falhar.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>exception</parameter></term>
     <listitem>
      <para>
       No PHP 7 o segundo parâmetro pode ser um objeto
       <classname>Throwable</classname> em vez de uma string
       <type>string</type>, e nesse caso o objeto será
       lançado caso o assert falhe e 
       <link linkend="ini.assert.exception">assert.exception</link>
       estiver habilitado.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &false; se o assert é falso, &true; nos demais casos.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>7.0.0</entry>
       <entry>
        <function>assert</function> agora é um constructo de linguagem e não mais
        uma função. <function>assertion</function> agora pode ser uma expressão.
        O segundo parâmtro pode ser interpretado como um
        <parameter>exception</parameter> (se do tipo
        <classname>Throwable</classname>) ou como uma string, funcionando como o campo
        <parameter>description</parameter> do PHP 5.4.8 e posteriores.
       </entry>
      </row>
      <row>
       <entry>5.4.8</entry>
       <entry>
        O parâmetro <parameter>description</parameter> foi adicionado. O parâmetro
        <parameter>description</parameter> é informado na função callback
        no modo <constant>ASSERT_CALLBACK</constant> como o quarto
        argumento.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <refsect2>
   <title>Asserts tradicionais (PHP 5 e 7)</title>
   <para>
    <example>
     <title>Lida com um assert falho com um manipulador próprio</title>
     <programlisting role="php">
<![CDATA[
<?php
// Ativa asserts configura silêncio
assert_options(ASSERT_ACTIVE, 1);
assert_options(ASSERT_WARNING, 0);
assert_options(ASSERT_QUIET_EVAL, 1);

// Cria a função de manipulação
function my_assert_handler($file, $line, $code)
{
    echo "<hr>Assertion Failed:
        File '$file'<br />
        Line '$line'<br />
        Code '$code'<br /><hr />";
}

// Configura o callback
assert_options(ASSERT_CALLBACK, 'my_assert_handler');

// Realiza um assert que deve falhar
assert('mysql_query("")');
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    <example>
     <title>Utilizando um manipulador para imprimir uma descrição</title>
     <programlisting role="php">
<![CDATA[
<?php
// Ativa asserts configura silêncio
assert_options(ASSERT_ACTIVE, 1);
assert_options(ASSERT_WARNING, 0);
assert_options(ASSERT_QUIET_EVAL, 1);

// Cria a função de manipulação
function my_assert_handler($file, $line, $code, $desc = null)
{
    echo "Assertion failed at $file:$line: $code";
    if ($desc) {
        echo ": $desc";
    }
    echo "\n";
}

// Configura o callback
assert_options(ASSERT_CALLBACK, 'my_assert_handler');

// Make an assertion that should fail
assert('2 < 1');
assert('2 < 1', 'Two is less than one');
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
 <![CDATA[
 Assertion failed at test.php:21: 2 < 1
 Assertion failed at test.php:22: 2 < 1: Two is less than one
 ]]>
     </screen>
    </example>
   </para>
  </refsect2>
  <refsect2>
   <title>Expectativas (PHP 7 somente)</title>
   <example>
    <title>Expectativs sem uma exceção configurada</title>
    <programlisting role="php">
<![CDATA[
<?php
assert(true == false);
echo 'Hi!';
?>
]]>
    </programlisting>
    <para>
     Com <link linkend="ini.zend.assertions">zend.assertions</link> configurado para 0
     o exemplo acima imprimirá:
    </para>
    <screen>
<![CDATA[
Hi!
]]>
    </screen>
    <para>
     Com <link linkend="ini.zend.assertions">zend.assertions</link> configurado para 1
     e <link linkend="ini.assert.exception">assert.exception</link> para 0
     O exemplo acima imprimirá:
    </para>
    <screen>
<![CDATA[
Warning: assert(): assert(true == false) failed in - on line 2
Hi!
]]>
    </screen>
    <para>
     Com <link linkend="ini.zend.assertions">zend.assertions</link> configurado para 1
     e <link linkend="ini.assert.exception">assert.exception</link> para 1
     o exemplo acima imprimirá:
    </para>
    <screen>
<![CDATA[
Fatal error: Uncaught AssertionError: assert(true == false) in -:2
Stack trace:
#0 -(2): assert(false, 'assert(true == ...')
#1 {main}
  thrown in - on line 2
]]>
    </screen>
   </example>
   <example>
    <title>Expectativs com uma exceção configurada</title>
    <programlisting role="php">
<![CDATA[
<?php
class CustomError extends AssertionError {}

assert(true == false, new CustomError('True is not false!'));
echo 'Hi!';
?>
]]>
    </programlisting>
    <para>
     Com <link linkend="ini.zend.assertions">zend.assertions</link> configurado para 0
     o exemplo acima imprirá:
    </para>
    <screen>
<![CDATA[
Hi!
]]>
    </screen>
    <para>
     Com <link linkend="ini.zend.assertions">zend.assertions</link> configurado para 0
     e <link linkend="ini.assert.exception">assert.exception</link> para 0
     o exemplo acima imprimirá:
    </para>
    <screen>
<![CDATA[
Warning: assert(): CustomError: True is not false! in -:4
Stack trace:
#0 {main} failed in - on line 4
Hi!
]]>
    </screen>
    <para>
     Com <link linkend="ini.zend.assertions">zend.assertions</link> configurado para 1
     e <link linkend="ini.assert.exception">assert.exception</link> para 1
     o exemplo acima imprimirá:
    </para>
    <screen>
<![CDATA[
Fatal error: Uncaught CustomError: True is not false! in -:4
Stack trace:
#0 {main}
  thrown in - on line 4
]]>
    </screen>
   </example>
  </refsect2>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>assert_options</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
