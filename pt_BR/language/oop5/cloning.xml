<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 337312 Maintainer: ae Status: ready --><!-- CREDITS: narigone,ae -->
 <sect1 xml:id="language.oop5.cloning" xmlns="http://docbook.org/ns/docbook">
  <title>Clonando objetos</title>
  
  <para>
   Criar uma cópia de um objeto com propriedades totalmente replicadas nem sempre
   é o comportamento desejado. Um bom exemplo da necessidade para construtores
   de cópia é se você tem um objeto que representa uma janela do GTK e um 
   objeto guarda o resource dessa janela. Quando você criar uma duplicata,
   você pode querer criar uma nova janela com as mesmas propriedades e fazer o
   novo objeto quarda o resource da nova janela. Outro exemplo é se seu
   objeto guarda uma referência a outro objeto o qual ele usa e quando você
   replicar o objeto pai, você quer que seja criada uma nova instância desse outro
   objeto para que a réplica tenha sua própria cópia separada.
  </para>

  <para>
   Uma cópia de objeto é criada usando a palavra-chave <emphasis>clone</emphasis> (que chama o
   método <link linkend="object.clone">__clone()</link> do objeto, se possível).
   O método <link linkend="object.clone">__clone()</link> de um objeto
   não pode ser chamado diretamente.
  </para>

  <informalexample>
   <programlisting>
<![CDATA[
$copia_do_objeto = clone $objeto;
]]>
   </programlisting>
  </informalexample>

  <para>
   Quando um objeto é clonado, PHP 5 fará uma cópia superficial de todas as
   propriedades do objeto. Qualquer propriedade que seja referência a outra variável,
   permanecerão como referências.
  </para>

  <methodsynopsis xml:id="object.clone">
   <type>void</type><methodname>__clone</methodname>
   <void/>
  </methodsynopsis>

  <para>
   Depois que a clonagem se completa, se um método <link linkend="object.clone">__clone()</link> estiver definido então
   o novo objetivo criado terá seu método <link linkend="object.clone">__clone()</link> chamado, assim permitindo que
   qualquer propriedade seja alterada.
  </para>

  <example>
   <title>Clonando um objeto</title>
   <programlisting role="php">
<![CDATA[
<?php
class SubObject
{
    static $instances = 0;
    public $instance;

    public function __construct() {
        $this->instance = ++self::$instances;
    }

    public function __clone() {
        $this->instance = ++self::$instances;
    }
}

class MyCloneable
{
    public $object1;
    public $object2;

    function __clone()
    {
        // Force a copy of this->object, otherwise
        // it will point to same object.
        $this->object1 = clone $this->object1;
    }
}

$obj = new MyCloneable();

$obj->object1 = new SubObject();
$obj->object2 = new SubObject();

$obj2 = clone $obj;


print("Original Object:\n");
print_r($obj);

print("Cloned Object:\n");
print_r($obj2);

?> 
]]>
   </programlisting>
   &example.outputs;
   <screen role="php">
<![CDATA[
Original Object:
MyCloneable Object
(
    [object1] => SubObject Object
        (
            [instance] => 1
        )

    [object2] => SubObject Object
        (
            [instance] => 2
        )

)
Cloned Object:
MyCloneable Object
(
    [object1] => SubObject Object
        (
            [instance] => 3
        )

    [object2] => SubObject Object
        (
            [instance] => 2
        )

)
]]>

   </screen>

  </example>

 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
