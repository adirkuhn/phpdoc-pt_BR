<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 337754 Maintainer: ae Status: ready --><!-- CREDITS: narigone,felipe,ae -->
 <sect1 xml:id="language.oop5.decon" xmlns="http://docbook.org/ns/docbook">
  <title>Construtores e Destrutores</title>

  <sect2 xml:id="language.oop5.decon.constructor">
   <title>Construtores</title>
   <methodsynopsis xml:id="object.construct">
    <type>void</type><methodname>__construct</methodname>
    <methodparam choice="opt"><type>mixed</type><parameter>args</parameter></methodparam>
    <methodparam choice="opt"><parameter>...</parameter></methodparam>
   </methodsynopsis>
   <para>
    PHP 5 permite que os desenvolvedores declarem métodos construtores para as classes.
    Classes que tem um método construtor chamam esse método cada vez
    que um objeto novo é criado, então é apropriado para qualquer inicialização que o
    objeto possa vir a precisar antes de ser usado.
   </para>
   <note>
    <simpara>
     Construtores pais não são chamados implicitamente se a classe filha define
     um construtor. Para executar o construtor da classe pai, uma chamada a
     <function>parent::__construct</function> dentro do construtor da classe filha
     é necessária. Se a classe filhas não definir um construtor então ele será herdado
     da classe pai como um método normal (se não declarado
     como privado).
    </simpara>
   </note>
   <example>
    <title>Usando novos construtores unificados</title>
    <programlisting role="php">
<![CDATA[
<?php
class BaseClass {
   function __construct() {
       print "In BaseClass constructor\n";
   }
}

class SubClass extends BaseClass {
   function __construct() {
       parent::__construct();
       print "In SubClass constructor\n";
   }
}

class OtherSubClass extends BaseClass {
    // inherits BaseClass's constructor
}

// In BaseClass constructor
$obj = new BaseClass();

// In BaseClass constructor
// In SubClass constructor
$obj = new SubClass();

// In BaseClass constructor
$obj = new OtherSubClass();
?> 
]]>
    </programlisting>
   </example>
   <para>
    Por compatibilidade reversa com os PHP 3 e 4, se não conseguir achar um
    <link linkend="object.construct">__construct()</link> para uma determinada
    classe, e não houver um construtor herdado de uma classe pai, ele procurará
    pela função construtora à moda-antiga, que tenha o mesmo nome da classe.
    Efetivamente, significa que o único caso que pode gerar problemas de
    compatibilidade seria se a classe tiver um método chamado
    <link linkend="object.construct">__construct()</link> que fosse usado
    para outra finalidade que não inicializar o objeto.
   </para>
   <!-- Not using an entity because I want specific wording here, since we're
   not deprecating constructors in general. -->
   <warning>
    <simpara>
     Construtores no estilo antigo estão <emphasis>OBSOLETOS</emphasis> desde o PHP 7.0, e
     provalmente serão removidos numa versão futura. Você deve sempre utilizar
     <link linkend="object.construct">__construct()</link> em código novo.
    </simpara>
   </warning>
   <para>
    Diferente de outros métodos, PHP não irá gerar uma mensagem de erro de nível
    <constant>E_STRICT</constant> quando
    <link linkend="object.construct">__construct()</link>  é sobreescrito com parâmetros diferentes
    que o método <link linkend="object.construct">__construct()</link>  pai foi definido.
   </para>
   <para>
    A partir do PHP 5.3.3, métodos com o mesmo nome como último elemento de uma
    classe dentro de namespace não será mais tratado como construtor. Esta
    mudança não afeta classe fora de namespace.
   </para>
   <example>
    <title>Construtores em classes dentro de namespace</title>
    <programlisting role="php">
<![CDATA[
<?php
namespace Foo;
class Bar {
    public function Bar() {
        // tratado como construtor no PHP 5.3.0-5.3.2
        // tratado como método comum a partir do PHP 5.3.3
    }
}
?>
]]>
    </programlisting>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.decon.destructor">
   <title>Destrutor</title>
   <methodsynopsis xml:id="object.destruct">
    <type>void</type><methodname>__destruct</methodname>
    <void />
   </methodsynopsis>
   <para>
    PHP 5 introduz um conceito de destrutor similar ao de outras
    linguagens orientadas a objeto, como o Java. O método destrutor será chamado
    assim que todas as referências a um objeto particular forem removidas ou quando
    o objeto for explicitamente destruído ou qualquer ordem na sequência de encerramento.
   </para>
   <example>
    <title>Exemplo de Destrutor</title>
    <programlisting role="php">
<![CDATA[
<?php
class MinhaClasseDestruivel {
   function __construct() {
       print "No construtor\n";
       $this->name = "MinhaClasseDestruivel";
   }

   function __destruct() {
       print "Destruindo " . $this->name . "\n";
   }
}

$obj = new MinhaClasseDestruivel();
?>
]]>
    </programlisting>
   </example>
   <para>
    Como os construtores, destrutores herdados não serão chamados implicitamente pela
    engine. Para executar o destrutor pai, deve-se fazer uma chamada
    explicitamente a <function>parent::__destruct</function> no corpo do
    destrutor. Assim como construtores, uma classe filha pode herdar o destrutor
    pai caso ela não impremente um.
   </para>
   <para>
    O destrutor será chamado mesmo se o script for terminado utilizando-se
    <function>exit</function>. Chamar <function>exit</function> em um destrutor
    irá impedir que as demais rotinas de encerramento de executar.
   </para>
   <note>
    <para>
     Destrutores chamados durante o encerramento da execução do script tem os cabeçalhos HTTP já
     enviados. O diretório atual na fase de encerramento do script pode ser diferente
     em alguns SAPIs (e.g. Apache).
    </para>
   </note>
   <note>
    <para>
     Tentar disparar uma exceção em um destrutor (chamado no término 
     do script) causa um erro fatal.
    </para>
   </note>
  </sect2>

 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
