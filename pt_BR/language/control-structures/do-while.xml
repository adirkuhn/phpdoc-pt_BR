<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 312947 Maintainer: diegopires Status: ready --><!-- CREDITS: diegopires -->

<sect1 xml:id="control-structures.do.while" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title><literal>do-while</literal></title>
 <?phpdoc print-version-for="dowhile"?>
 <simpara>
  O loop <literal>do-while</literal> é muito similar ao loop
  <literal>while</literal>, exceto pela expressão de verificação
  que está no final de cara iteração ao invés de estar no começo.
  A maio diferença para o loop normal <literal>while</literal> é
  que a primeira iteração do loop <literal>do-while</literal> é
  sempre executada (a expressão de verificação somente é executada no final
  da iteração), considerando que no loop <literal>while</literal> não é 
  necessariamente executada (a expressão de verificação é
  executada no começo de cada iteração, e se o resultado for
  &false; logo no começo, a execução do loop
  é abortada imediatamente).
 </simpara>
 <para>
  Só há uma sintaxe para o loop<literal>do-while</literal>:

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$i = 0;
do {
    echo $i;
} while ($i > 0);
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
   O loop acima será executado somente uma vez, pois após a primeira 
   iteração, quando a expressão de verificação for executada, ela resultará em
   &false; (<varname>$i</varname> não é maior que 0) e a execução do loop
   será encerrada.
 </simpara>
 <para>
  Usuário avançados de C devem estar familiarizados com um uso diferente do loop
  <literal>do-while</literal>, que permite parar a execução no meio 
  do bloco de códigos, encapsulando eles em um 
  <literal>do-while</literal> (0), e usando o <link
  linkend="control-structures.break"><literal>break</literal></link>
  .  O código a seguir demonstra isso:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
do {
    if ($i < 5) {
        echo "i is not big enough";
        break;
    }
    $i *= $factor;
    if ($i < $minimum_limit) {
        break;
    }
   echo "i is ok";

    /* process i */

} while (0);
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  Não se preocupe se você não entender isso neste momento.
  Você pode criar scripts simples ou mesmo poderosos sem usar esse
  'recurso'.
  Desde o PHP 5.3.0, é possível usar o operador
  <link linkend="control-structures.goto"><literal>goto</literal></link>
  ao invés desse hack.
 </simpara>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
