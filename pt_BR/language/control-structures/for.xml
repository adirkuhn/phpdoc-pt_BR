<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 326845 Maintainer: diegopires Status: ready -->

<sect1 xml:id="control-structures.for" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title><literal>for</literal></title>
 <?phpdoc print-version-for="for"?>
 <para>
  O loop <literal>for</literal> é o loop mais complexo no PHP.
  Ele tem comportamento semelhante ao C. A sintaxe do loop
  <literal>for</literal> é:
  <informalexample>
   <programlisting>
<![CDATA[
for (expr1; expr2; expr3)
    statement
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  A primeira expressão (<varname>expr1</varname>) é
  executada incondicionalmente somente no começo
  do loop.
 </simpara>
 <simpara>
  No começo de cada iteração a 
  <varname>expr2</varname> é avaliada. Se a avaliação resultar em
  &true;, o loop continua e as instruções aninhada
  são executadas. Se a avaliação resultar em
  &false;, a execução do loop termina.
 </simpara>
 <simpara>
  No final de cada iteração, a <varname>expr3</varname> é 
  executada.
 </simpara>
 <simpara>
  Cada uma das expressões podem sem vazias ou conter múltiplas
  expressões separadas por vírgulas. Na <varname>expr2</varname>, todas
  as expressões separadas por vírgula são avaliadas mas o resultado é
  obtido da última parte.
  Se a <varname>expr2</varname> estiver vazia significa que o loop deve
  ser executado indefinidamente (O PHP considera implicitamente como 
  &true;, igual ao C). Isto pode não ser tão inútil 
  quanto você pensa, pois muitas vezes você desejar que o loop termine usando
  a instrução <link
  linkend="control-structures.break"><literal>break</literal></link>
  ao invés de usar a expressão verdade do 
  <literal>for</literal>.
 </simpara>
 <para>
  Analise os seguintes exemplos. Todos exibem números
  de 1 até 10:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
/* exemplo 1 */

for ($i = 1; $i <= 10; $i++) {
    echo $i;
}

/* exemplo 2 2 */

for ($i = 1; ; $i++) {
    if ($i > 10) {
        break;
    }
    echo $i;
}

/* exemplo 3 */

$i = 1;
for (; ; ) {
    if ($i > 10) {
        break;
    }
    echo $i;
    $i++;
}

/* exemplo 4 */

for ($i = 1, $j = 0; $i <= 10; $j += $i, print $i, $i++);
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  É claro que o primeiro exemplo aparenta ser o melhor (ou
  talvez o quarto), mas você pode achar que usar expressões
  vazias no loop <literal>for</literal> seja vantajoso em algumas
  ocasiões.
 </simpara>
 <para>
  O PHP também suporta a sintaxe alternativa "dois pontos" para o 
  loop <literal>for</literal>.
  <informalexample>
   <programlisting>
<![CDATA[
for (expr1; expr2; expr3):
    statement
    ...
endfor;
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  É comum para muitos usuários iterar em arrays como no
  example abaixo.
 </simpara>
 <para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
/*
 * Esta é uma array com alguns dados que devem ser modificadoswant to modify
 * durante a execuçao do loop for.
 */
$people = array(
    array('name' => 'Kalle', 'salt' => 856412),
    array('name' => 'Pierre', 'salt' => 215863)
);

for($i = 0; $i < count($people); ++$i) {
    $people[$i]['salt'] = mt_rand(000000, 999999);
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  O código acima pode se tornar lento, pois o tamanho do array será calculado 
  a cada iteração. Desde que o tamanho nunca mude, o loop pode ser facilmente 
  otimizado usando uma variável intermediária para guardar o tamanho ao invés 
  de executar repetidamente o <function>count</function>:
 </simpara>
 <para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$people = array(
    array('name' => 'Kalle', 'salt' => 856412),
    array('name' => 'Pierre', 'salt' => 215863)
);

for($i = 0, $size = count($people); $i < $size; ++$i) {
    $people[$i]['salt'] = mt_rand(000000, 999999);
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
