<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 336196 Maintainer: diegopires Status: ready --><!-- CREDITS: diegopires,ae -->

<sect1 xml:id="control-structures.continue" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title><literal>continue</literal></title>
 <?phpdoc print-version-for="continue"?>
 <simpara>
  <literal>continue</literal> é utilizado em estruturas de loop para 
  pular o resto da iteração atual do loop e continuar a execução
  com a condição de valores e e iniciar a próxima iteração.
 </simpara>
 <note>
  <simpara>
   No PHP a instrução
   <link linkend="control-structures.switch">switch</link> é
   considerado uma estrutura de loop para os propósitos do 
   <literal>continue</literal>. <literal>continue</literal> se comporta como
   <literal>break</literal> sem argumentos. Se um
   <literal>switch</literal> está dentro de um loop então
   <literal>continue 2</literal> irá continuar a próxima interação
   do loop externo.
  </simpara>
 </note>
 <simpara>
  <literal>continue</literal> aceita um argumento numérico opcional
  que diz quantos níves loops aninhados ele deve pular
  ao final. O valor padrão é <literal>1</literal>, indo assim
  para o final do loop atual.
 </simpara>
 <para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
while (list($key, $value) = each($arr)) {
    if (!($key % 2)) { // skip odd members
        continue;
    }
    do_something_odd($value);
}

$i = 0;
while ($i++ < 5) {
    echo "Outer<br />\n";
    while (1) {
        echo "Middle<br />\n";
        while (1) {
            echo "Inner<br />\n";
            continue 3;
        }
        echo "This never gets output.<br />\n";
    }
    echo "Neither does this.<br />\n";
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  Omitir o ponto e vírgula depois <literal>continue</literal> pode causar
  confusão. Abaixo está um exemplo do que você não deve fazer.
 </para>
 <para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
for ($i = 0; $i < 5; ++$i) {
    if ($i == 2)
        continue
    print "$i\n";
}
?>
]]>
   </programlisting>
   <para>
    O resultado esperado poderia ser:
   </para>
   <screen>
<![CDATA[
0
1
3
4
]]>
   </screen>
   <para>
    mas em versões do PHP abaixo da 5.4.0, esse script irá resultar em:
   </para>
   <screen>
<![CDATA[
2
]]>
   </screen>
   <para>
    porque todo o código <literal>continue print "$i\n";</literal> é interpretado
    como uma só expressão, então o <function>print</function> é chamado somente
    quando <literal>$i == 2</literal> é verdadeiro. (O retorno do
    <literal>print</literal> é passado como argumento
    para o <literal>continue</literal>.)
   </para>
   <note>
    <para>
     A partir do PHP 5.4.0, o exemplo acima irá causar um
     erro do tipo <constant>E_COMPILE_ERROR</constant>.
    </para>
   </note>
  </informalexample>
 </para>
 <para>
  <table>
   <title>Changelog para o <literal>continue</literal></title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>5.4.0</entry>
      <entry>
       <literal>continue 0;</literal> não é mais válido. Em versões anteriores era interpretado
       como <literal>continue 1;</literal>.
      </entry>
     </row>
     <row>
      <entry>5.4.0</entry>
      <entry>
       Remmovida a possibilidade de passar variáveis como argumento
       (ex., <literal>$num = 2; continue $num;</literal>).
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </para>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
